#!/bin/bash

#shellcheck disable=SC2010,2154,1091

# TODO: spicetify, tmux, vim

# LOADING SHARED FILE

if [[ -f $(pwd)/shared ]]; then
    source shared
else
    echo "missing file: shared"
    exit 1
fi

install_os_utils() {
    print_title "[!] INSTALLING OS UTILITIES"
    print_info "This will install tools like "
    sudo pacman -Sy --noconfirm cmake bc rsync mlocate bash-completion pkgstats git go curl wget zsh \
                    atop htop neofetch zip unzip unrar p7zip lzop cpio ntfs-3g python python-pip dnsutils rng-tools \
                    dosfstools exfat-utils f2fs-tools fuse fuse-exfat autofs mtpfs cmus shellcheck jq mate-polkit \
                    molecule playerctl firefox caja mat2 firejail ebtables dnsmasq meson ninja gtkmm3
}

enable_nfs() {
    print_title "[!] ENABLING NFS"
    sudo systemctl enable rpcbind
    sudo systemctl enable nfs-client.target
    sudo systemctl enable remote-fs.target
}

# Install security tools
## TODO: hostblock, aide

install_doas() {
    print_info "'sudo' command is being replaced with 'doas'"
    yay -Sy doas
    echo "permit persist :wheel" | sudo tee /etc/doas.conf
    echo "alias sudo=\"doas\"" >> ~/.config/zsh/alias.conf
    sudo pacman -Rs sudo
    yay --sudo doas --sudoflags -- --save
}

kernel_harden() {
    print_info "Applying hardened kernel parameters"
    # Disable unrestricted kernel debug and proc view
    cd $1 || exit
    sudo cp sysctl.conf /etc/sysctl.conf
    sudo sysctl -p /etc/sysctl.conf
}

security_handler() {
    print_title "[!] INSTALLING SECURITY TOOLS"
    sudo pacman -Sy --noconfirm rkhunter clamav logwatch rmlint lynis checksec arch-audit arpwatch
    sudo systemctl enable clamav-daemon
    sudo freshclam -d -c 1
    sudo rkhunter --propupd
    sudo rkhunter --update
    print_info "[!] Hardening Kernel"
    read_input_text "Want to harden kernel params?"
    if [[ $OPTION == y ]]; then
        kernel_harden $1
    fi
    print_info "[!] Installing doas"
    read_input_text "Want to replace 'sudo' with 'doas'?"
    if [[ $OPTION == y ]]; then
        install_doas
    fi
}

# Install audio utilities

install_audio() {
    print_title "[!] INSTALLING AUDIO TOOLS"
    sudo pacman -Sy --noconfirm alsa-utils alsa-plugins pulseaudio pulseaudio-alsa pavucontrol
}

# Install Blutooth

install_bluetooth() {
    print_title "[!] INSTALLING BLUETOOTH"
    BLZ=$(dmesg | grep Blue | wc -l)
    if [[ $BLZ -gt 0 ]]; then
        read -p "Want to install Bluetooth? [Y/n]" -n 1 -r
        echo
        REPLY=${REPLY:-Y}
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo pacman -Sy --noconfirm bluez bluez-utils pulseaudio-bluetooth blueman
            syudo systemctl enable bluetooth
        fi
    fi
}

# Install colored utilities

install_colored() {
    print_title "[!] INSTALLING COLORED UTILS"
    sudo pacman -Sy --noconfirm lsd bat grc
}

# Install Amd GPU

install_gpu() {
    print_title "[!] INSTALLING AMD GPU"
    read_input_text "Want to install AMD GPU?"
    if [[ $OPTION == y ]]; then
        sudo pacman -Sy --noconfirm xf86-video-amdgpu mesa vulkan-radeon vulkan-tools mesa-libgl \
                                    libvdpau-va-gl vulkan-icd-loader mesa-vdpau 
        add_module "amdgpu radeon" "ati"
        if [ "$(ls /boot | grep hardened -c)" -gt "0" ]; then
            sudo mkinitcpio -p linux-hardened
        elif [ "$(ls /boot | grep lts -c)" -gt "0" ]; then
            sudo mkinitcpio -p linux-lts
        elif [ "$(ls /boot | grep zen -c)" -gt "0" ]; then
            sudo mkinitcpio -p linux-zen
        else
            sudo mkinitcpio -p linux
        fi
    fi
    #yay -Sy vulkan-amdgpu-pro
}

# Install Yay

install_yay() {
    print_title "[!] INSTALLING YAY"
    cd /tmp || exit
    git clone https://aur.archlinux.org/yay.git
    cd yay || exit
    makepkg -csi --noconfirm
}

# Installing oh-my-zsh and plugins

install_zsh_plugins() {
    print_title "[!] INSTALLING ZSH PLUGINS"
    sh -c \\"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\\"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/themes/powerlevel10k
    git clone https://github.com/zsh-users/zsh-completions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/plugins/zsh-completions
    git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/plugins/zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/plugins/zsh-syntax-highlighting
}

# Configuring sddm

configure_sddm() {
    print_title "[!] CONFIGURING SDDM"
    sudo pacman -Sy qt5-graphicaleffects sddm
    cd /tmp || exit
    git clone https://github.com/RadRussianRus/sddm-slice.git
    sed -i '3 s/background=/background=~\/.images\/AbstractViolet.png/g' sddm-slice/theme.conf
    cp sddm-slice/theme.conf sdmm-slice/theme.conf.user
    sudo cp -r sddm-slice /usr/share/sddm/themes/sddm-slice
    sudo mkdir /etc/sddm.conf.d
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf.d/
    sudo sed -i '33 s/Current=/Current=sddm-slice/g' /etc/sddm.conf.d/default.conf
    sudo systemctl enable sddm
}

# Configuring DNS In order to work properly with some vpns.

configure_dns() {
    print_title "[!] CONFIGURING DNS"
    sudo rm /etc/resolv.conf
    sudo ln -s /run/NetworkManager/resolv.conf /etc/resolv.conf
    sudo resolvconf -u
    # echo "enabled=false" | sudo tee /usr/lib/NetworkManager/conf.d/20-connectivity.conf
}

# Install Virtualization
## ! BOTH NOT WORKING PROPERLY. FIX NEEDED.

install_virtualbox() {
    print_title "[!] INSTALLING virtualbox"
    yay -Sy --noconfirm virtualbox-bin virtualbox-ext-oracle
}

install_kvm() {
    print_title "[!] INSTALLING qemu/kvm"
    echo "todo"
    sudo pacman -Sy --noconfirm libvirt virt-manager dmidecode
    sudo usermod -aG libvirt "$USER"
    sudo usermod -aG kvm "$USER"
    sudo systemctl enable libvirtd
}

virtualization_handler(){
    print_title "[!] INSTALLING VIRTUALIZATION"
    read_input_text "Want to install Virtualization Software?"
    if [[ $OPTION == y ]]; then
        PS3="$prompt1"
        virt_list=("VirtualBox" "NONE")
        echo -e "Select your Virtualization Software: \n"
        select VIRT in "${virt_list[@]}"; do
            if contains_element "$VIRT" "${virt_list[@]}"; then
                if [ "VirtualBox" == "$VIRT" ]; then
                    install_virtualbox
                    break
                elif [ "QUEMU/KVM" == "$VIRT" ]; then
                    install_kvm
                    break
                elif [ "NONE" == "$VIRT" ]; then
                    break
                fi
            else
                invalid_option
            fi
        done
    fi
}

# Podman Containerization
## WORKING OK BUT PROBLEMS WITH KVM

containerization_handler(){
    print_title "[!] INSTALLING CONTAINERS"
    read_input_text "Want to install Podman as Containerization Software?"
    if [[ $OPTION == y ]]; then
        sudo pacman -Sy --noconfirm crun podman       
        sudo touch /etc/{subgid,subuid}
        sudo usermod --add-subuids 165536-231072 --add-subgids 165536-231072 "$USER"
        podman system migrate
        echo "[registries.search]" | sudo tee -a /etc/containers/registries.conf
        echo "registries = ['registry.access.redhat.com', 'registry.fedoraproject.org', 'registry.centos.org', 'docker.io']" | sudo tee -a /etc/containers/registries.conf
        sudo sed -i '8 s/driver=/driver=vfs/g' /etc/containers/storage.conf
    fi
}

spicetify_install() {
    spotify &
    pkill spotify
    sudo chmod a+wr /opt/spotify
    sudo chmod a+wr /opt/spotify/Apps -R
    spicetify
    spicetify backup apply enable-devtool
    cd /tmp || exit
    git clone https://github.com/morpheusthewhite/spicetify-themes
    cd spicetify-themes || exit
    cp -r * ~/.config/spicetify/Themes
    spicetify config current_theme Black
    spicetify config color_scheme Purple
    spicetify apply
}

vscodium_autotune() {
    code --install-extension coenraads.bracket-pair-colorizer-2
    code --install-extension itsjonq.owlet
    code --install-extension timonwong.shellcheck
    code --install-extension equinusocio.vsc-material-theme-icons
}

common_rice() {
    print_title "[!] INSTALLING COMMON RICE"
    # Nano Colors
    curl https://raw.githubusercontent.com/scopatz/nanorc/master/install.sh | sh
    # Colored Pacman
    sudo sed -i '33 s/#Color/Color/g' /etc/pacman.conf
    # Setting Theme and icon Theme
    gsettings set org.gnome.desktop.interface gtk-theme "$1"
    sudo pacman -Sy --noconfirm papirus-icon-theme light mpc mpd mpv feh kitty qutebrowser ranger
    gsettings set org.gnome.desktop.interface icon-theme 'Papirus-Dark'
    gpg --keyserver keyserver.ubuntu.com --recv-key 8FD3D9A8D3800305A9FFF259D1742AD60D811D58
    yay -Sy --answerclean A --answerdiff N papirus-folders cava vscodium-bin nerd-fonts-noto spotify spicetify-cli \
              secure-delete tty-clock pipes.sh trash autotiling cmatrix-git ufetch gotop
    papirus-folders --theme Papirus-Dark -C violet
    # Ranger icons
    git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons
    # ZSH Plugins
    install_zsh_plugins
    # Spicetify
    spicetify_install
    # VSCodium
    vscodium_autotune
}

# i3-gaps Rice

i3_rice() {
    print_title "[!] INSTALLING i3 RICE SOFTWARE"
    sudo pacman -Sy --noconfirm xorg xorg-server picom dunst i3-gaps rofi scrot maim xclip nitrogen xautolock
    yay -Sy --answerclean A --answerdiff N i3lock-fancy
}

compile_polybar() {
    yay -Sy --answerclean A --answerdiff N polybar-git
}

i3_violet_rice() {
    sudo pacman -Sy materia-gtk-theme
    compile_polybar
    common_rice "Materia-dark-compact"
    cd /tmp || exit
    git clone https://github.com/vol0s/i3-violet-rice
    cd i3-violet-rice || exit
    bash vird.sh &
}

i3_dracula_rice() {
    echo "todo"
}

# Compiling & installing waybar

compile_waybar() {
    print_title "[!] COMPILING WAYBAR"
    cd /tmp || exit
    git clone https://github.com/Alexays/Waybar
    cd Waybar || exit
    meson build
    ninja -C build
    sudo ninja -C build install
}

# SwayWM Rice

sway_rice() {
    print_title "[!] INSTALLING SWAY RICE SOFTWARE"
    sudo pacman -Sy --noconfirm xorg-server-xwayland sway wl-clipboard mako \
                wofi swayidle grim slurp qt5-wayland
    yay -Sy --answerclean A --answerdiff N swaylock-effects-git
}

# Sway Custom Dracula Flavour # NOT FINISHED

sway_dracula_rice() {
    common_rice "ant-dracula-gtk-theme"
    echo "test"
}

# Sway Custom Violet Flavour

sway_violet_rice() {
    sudo pacman -Sy materia-gtk-theme
    compile_waybar
    common_rice "Materia-dark-compact"
    cd /tmp || exit
    git clone https://github.com/vol0s/sway-violet-rice
    cd sway-violet-rice || exit
    bash vsrd.sh &
}

# Ricing Handler

ricing_handler() {
    print_title "[!] R U RICING OR NOT"
    read_input_text "Wanna rice?"
    if [[ $OPTION == y ]]; then
        rice_list=("Sway Violet Rice" "i3 Violet Rice" "KDE (NO RICE)" "NONE")
        PS3="$prompt1"
        echo -e "Select your rice: \n"
        select RICE in "${rice_list[@]}"; do
            if contains_element "$RICE" "${rice_list[@]}"; then
                if [ "Sway Dracula Rice" == "$RICE" ]; then
                    echo "NOT FINISHED YET"
                    sway_rice
                    sway_dracula_rice
                    break
                elif [ "Sway Violet Rice" == "$RICE" ]; then
                    sway_rice
                    sway_violet_rice
                    break
                elif [ "i3 Violet Rice" == "$RICE" ]; then
                    i3_rice
                    i3_violet_rice
                    break
                elif [ "i3 Dracula Rice" == "$RICE" ]; then
                    echo "NOT FINISHED YET"
                    i3_rice
                    i3_dracula_rice
                    break
                elif [ "KDE (NO RICE)" == "$RICE" ]; then
                    sudo pacman -Sy plasma konsole ksysguard
                    break
                elif [ "NONE" == "$RICE" ]; then
                    break
                fi
            else
                invalid_option
            fi
        done
    fi
}

WS=$(pwd)
check_archlinux
check_user
system_update
install_os_utils
install_yay
enable_nfs
install_audio
install_bluetooth
install_colored
install_gpu
ricing_handler
configure_sddm
virtualization_handler
containerization_handler
security_handler $WS
sudo rm -rf /tmp/*
sudo reboot