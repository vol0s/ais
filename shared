#!/bin/bash
# FIX THIS ISSUES | NON-ACUTE
#shellcheck disable=SC1091,SC2001,SC2015,SC2034,SC2126,SC2154
#shellcheck disable=SC2154,SC2155,SC2181,SC2207,SC2143,SC2162

### CONFIGURATION VARS ###

KEYMAP="es"
TIMEZONE_PATH="Europe/Madrid"
NTP_STRING="0.es.pool.ntp.org"
LOCALE_GEN="es_ES.UTF-8"
HOSTNAME="host"
USERNAME="user"

# COLORS

Bold=$(tput bold)
Reset=$(tput sgr0)

Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)

BRed=${Bold}${Red}
BGreen=${Bold}${Green}
BYellow=${Bold}${Yellow}

# PROMPTS

prompt1="""
Enter your option: """

# MOUNTPOINTS

EFI_MOUNTPOINT="/boot"
ROOT_MOUNTPOINT="/dev/sda3"
BOOT_MOUNTPOINT="/dev/sda"
MOUNTPOINT="/mnt"

# IO FUNCTIONS

read_input_text() {
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        OPTION=$2
    else
        printf "%s" "$1 [y/N]: "
        read -r OPTION
        echo ""
    fi
    OPTION=$(echo "$OPTION" | tr '[:upper:]' '[:lower:]')
}

print_line() {
    printf "%$(tput cols)s\n"|tr ' ' '-'
}

print_title() {
    clear
    print_line
    echo -e "# ${Bold}$1${Reset}"
    print_line
    echo ""
}

print_info() {
    #Console width number
    T_COLS=$(tput cols)
    echo -e "${Bold}$1${Reset}\n" | fold -sw $(( T_COLS - 18 )) | sed 's/^/\t/'
}

error_msg() {
    local _msg="${1}"
    echo -e "${Red}${_msg}${Reset}"
    exit 1
}

print_warning() {
    T_COLS=$(tput cols)
    echo -e "${BYellow}$1${Reset}\n" | fold -sw $(( T_COLS - 1 ))
}

print_danger() {
    T_COLS=$(tput cols)
    echo -e "${BRed}$1${Reset}\n" | fold -sw $(( T_COLS - 1 ))
}

invalid_option() {
    print_line
    echo "Invalid option. Try another one."
    pause_function
}

pause_function() {
    print_line
    if [[ $AUTOMATIC_MODE -eq 0 ]]; then
        read -e -sn 1 -p "Press enter to continue..."
    fi
}

# CHECK FUNCTIONS

check_root() {
    if [[ "$(id -u)" != "0" ]]; then
        error_msg "ERROR! You must execute the script as the 'root' user."
    fi
}

check_user() {
    if [[ "$(id -u)" == "0" ]]; then
        error_msg "ERROR! You must execute the script as a normal user."
    fi
}

check_artixlinux() {
    if [[ ! -e /etc/artix-release ]]; then
        error_msg "ERROR! You must execute the script on Artix Linux."
    fi
}

# SYSTEM FUNCS

add_module() {
   echo "modules="\"$1\""" | sudo tee /etc/conf.d/modules
}

system_update() {
    sudo pacman -Syu --noconfirm
}

artix_chroot() {
    artix-chroot $MOUNTPOINT /bin/bash -c "${1}"
}

contains_element() {
    #check if an element exist in a string
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done;
}
