#!/bin/bash
# FIX THIS ISSUES | NON-ACUTE
#shellcheck disable=SC1091,SC2001,SC2015,SC2153,SC2154,SC2155,SC2181,SC2207,SC2046

# LOADING SHARED FILE

set -x

if [[ -f $(pwd)/shared ]]; then
    source shared
else
    echo "missing file: shared"
    exit 1
fi

# UMOUNT PARTITIONS

umount_partitions() {
    mounted_partitions=($(lsblk | grep "${MOUNTPOINT}" | awk '{print $7}' | sort -r))
    swapoff -a
    for i in "${mounted_partitions[@]}"; do
        umount "$i"
    done
}

# SELECT DEVICE

select_device() {
    devices_list=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'))
    PS3="$prompt1"
    echo -e "Attached Devices:\n"
    lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}' | column -t
    echo -e "\n"
    echo -e "Select device to partition: "
    select device in "${devices_list[@]}"; do
        if contains_element "${device}" "${devices_list[@]}"; then
            break
        else
            invalid_option
        fi
    done
    BOOT_MOUNTPOINT=$device
}

# SETUP PARTITION

create_partition() {
    select_device
    cfdisk "${device}"
}

# SELECT|FORMAT PARTITIONS

format_partitions() {
    print_title "[!] FORMATING PARTITIONS"
    
    mkfs.fat -F 32 /dev/sda1
    fatlabel /dev/sda1 BOOT
    mkswap -L SWAP /dev/sda2
    mkfs.ext4 -L ROOT /dev/sda3
    mkfs.ext4 -L HOME /dev/sda4

    swapon /dev/disk/by-label/SWAP
    mount /dev/disk/by-label/ROOT /mnt
    mkdir "${MOUNTPOINT}"/boot
    mkdir "${MOUNTPOINT}"/home
    mount /dev/disk/by-label/HOME "${MOUNTPOINT}"/home
    mount /dev/disk/by-label/BOOT "${MOUNTPOINT}"/boot
}

# SELECT LINUX VERSION

select_linux_kernel() {
    print_title "[!] SELECTING LINUX VERSION"
    version_list=("linux (default)" "linux-lts (long term support)" "linux-hardened (security features)" "linux-zen (tuned kernel)")
    PS3="$prompt1"
    echo -e "Select linux version to install\n"
    select VERSION in "${version_list[@]}"; do
        if contains_element "$VERSION" "${version_list[@]}"; then
            if [ "linux (default)" == "$VERSION" ]; then
                basestrap "${MOUNTPOINT}" base linux linux-headers
            elif [ "linux-lts (long term support)" == "$VERSION" ]; then
                basestrap "${MOUNTPOINT}" base linux-lts linux-lts-headers
            elif [ "linux-hardened (security features)" == "$VERSION" ]; then
                basestrap "${MOUNTPOINT}" base linux-hardened linux-hardened-headers
            elif [ "linux-zen (tuned kernel)" == "$VERSION" ]; then
                basestrap "${MOUNTPOINT}" base linux-zen linux-zen-headers
            fi
                basestrap "${MOUNTPOINT}" \
                    base-devel linux-firmware logrotate sudo perl neovim which net-tools git zsh connman-openrc \
                    openrc elogind-openrc parted sed nano
            break
        else
            invalid_option
        fi
    done
}

# INSTALLING BASE SYSTEM

install_base_system() {
    print_title "[!] INSTALLING BASE SYSTEM"
    print_info "Using the basestrap script we install the base system. The base-devel package group will be installed also."
    rm "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/vmlinuz-linux
    select_linux_kernel
    [[ $? -ne 0 ]] && error_msg "Installing base system to ${MOUNTPOINT} failed. Check error messages above."
    local PTABLE=$(parted -sl | grep "gpt")
    [[ -n $PTABLE ]] && basestrap "${MOUNTPOINT}" gptfdisk
    artix_chroot "rc-update add connmand"
}

# CONFIGURE KEYMAP

configure_keymap() {
    print_title "[!] CONFIGURING KEYMAP"
    #ADD KEYMAP TO THE NEW SETUP
    echo "KEYMAP=$KEYMAP" > "${MOUNTPOINT}"/etc/vconsole.conf
    sed -i '3 s/keymap="us"/keymap="es"/g' "${MOUNTPOINT}"/etc/conf.d/keymaps
}

# CONFIGURE FSTAB

configure_fstab() {
    print_title "[!] GENERATING FSTAB"
    fstabgen -U -p "${MOUNTPOINT}" >> "${MOUNTPOINT}"/etc/fstab
}

# CONFIGURE HOSTNAME

configure_hostname() {
    print_title "[!] CONFIGURING HOSTNAME"
    echo "$HOSTNAME" > "${MOUNTPOINT}"/etc/hostname
    echo "hostname='$HOSTNAME'" > "${MOUNTPOINT}"/etc/conf.d/hostname
    artix_chroot "echo \"127.0.0.1  \"$HOSTNAME\"\" >> /etc/hosts"
    artix_chroot "echo \"::1  \"$HOSTNAME\"\" >> /etc/hosts"
    artix_chroot "echo \"127.0.1.1  \"$HOSTNAME\".localdomain \"$HOSTNAME\"\" >> /etc/hosts"
}

# CONFIGURE TIMEZONE

configure_timezone() {
    print_title "[!] CONFIGURING TIMEZONE"
    artix_chroot "ln -sf /usr/share/zoneinfo/${TIMEZONE_PATH} /etc/localtime"
}

# CONFIGURE HARDWARECLOCK

configure_hardwareclock() {
    print_title "[!] CONFIGURING HARDWARE CLOCK TIME"
    print_info "This is set in /etc/adjtime. Set the hardware clock mode uniformly between your operating systems on the same machine. Otherwise, they will overwrite the time and cause clock shifts (which can cause time drift correction to be miscalibrated)."
    artix_chroot "hwclock --systohc --localtime"
}

# CONFIGURE LOCALE

configure_locale() {
    print_title "[!] GENERATING LOCALES"
    echo 'LANG="'"$LOCALE_GEN"'"' > "${MOUNTPOINT}"/etc/locale.conf
    artix_chroot "sed -i 's/#\('${LOCALE_GEN}'\)/\1/' /etc/locale.gen"
    artix_chroot "locale-gen"
}

# INSTALL BOOTLOADER

install_bootloader() {
    print_title "[!] INSTALLING BOOTLOADER grub2"
    basestrap "${MOUNTPOINT}" grub os-prober efibootmgr dosfstools
}

# CONFIGURE BOOTLOADER

configure_bootloader() {
    print_title "[!] CONFIGURING GRUB 2"
    artix_chroot "grub-install --target=x86_64-efi --efi-directory=${EFI_MOUNTPOINT} --bootloader-id=Artix --recheck"
    artix_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
}

# ROOT PASSWORD

root_password() {
    print_title "[!] ROOT PASSWORD"
    artix_chroot "passwd"
}

# NEW USER

new_user() {
    print_title "[!] NEW USER $USERNAME"
    artix_chroot "useradd -m -g users -G wheel -s /bin/zsh \"${USERNAME}\""
    artix_chroot "passwd \"${USERNAME}\""
    artix_chroot "sed -i '82 s/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' /etc/sudoers"
}

# FINISH

finish() {
    print_title "[!] INSTALL COMPLETED"
    print_warning "\nA copy of the AIS will be placed in /home/$USERNAME directory of your new system"
    cp -r /root/ais /mnt/home/"$USERNAME"
    rm -rf /root/ais
    #artix_chroot "chown -R $USERNAME:users /home/$USERNAME/ais"
    umount_partitions
    pause_function
    poweroff
}

check_root
check_artixlinux
umount_partitions
create_partition
format_partitions
install_base_system
configure_keymap
configure_fstab
configure_hostname
pause_function
configure_timezone
configure_hardwareclock
configure_locale
install_bootloader
configure_bootloader
root_password
new_user
finish